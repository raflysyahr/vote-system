generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Candidate {
  id    String
  name  String
  title String
  image String
}

model votes {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  startDateTime DateTime    @db.Date
  endDateTime   DateTime    @db.Date
  email         String
  publisher     String
  code          String      @unique
  candidates    Candidate[]
  createdAt     DateTime    @default(now()) @map("createdAt") @db.Date
  deleteAt      String?
  scheduled     Boolean
  user          user?       @relation(fields: [email], references: [email])
  participant   participant[]
}

model account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId   
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int 
  token_type        String?
  scope             String
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              user?    @relation(fields: [userId], references: [id])
  userId            String?  @unique @db.ObjectId

  @@unique([provider,providerAccountId])
  @@map("account")
}

model session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  expires       DateTime 
  session_token String   @unique
  access_token  String   @unique @map("access_token")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          user?    @relation(fields: [userId], references: [id])
  userId        String?   @unique @db.ObjectId
}

model user {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  votes         votes[]
  account       account?
  session       session?

  @@unique([id, email])
}

model verificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model participant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  idcandidate String
  code        String   
  createdAt   DateTime @default(now()) @map("createdAt") @db.Date
  votes       votes?   @relation(fields:[votesId],references:[id])
  votesId     String?  @db.ObjectId
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
